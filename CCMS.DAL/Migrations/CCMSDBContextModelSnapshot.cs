// <auto-generated />
using System;
using CCMS.DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CCMS.DAL.Migrations
{
    [DbContext(typeof(CCMSDBContext))]
    partial class CCMSDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:Collation", "SQL_Latin1_General_CP1_CI_AS")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.6")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CCMS.DAL.Entities.CommentEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ConventionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ConventionId");

                    b.HasIndex("OwnerId");

                    b.ToTable("Comment");
                });

            modelBuilder.Entity("CCMS.DAL.Entities.ConventionCheckEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("RepositoryCheckEntityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("RepositoryCheckEntityId");

                    b.ToTable("ConventionChecks");
                });

            modelBuilder.Entity("CCMS.DAL.Entities.ConventionEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("FormalTextId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("FormattedTextId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RepositoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("UpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("FormalTextId");

                    b.HasIndex("FormattedTextId");

                    b.HasIndex("RepositoryId");

                    b.HasIndex("UpdatedById");

                    b.ToTable("Conventions");
                });

            modelBuilder.Entity("CCMS.DAL.Entities.PatchEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Patch")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UpdatedTextEntityId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("UpdatedTextEntityId");

                    b.ToTable("Patches");
                });

            modelBuilder.Entity("CCMS.DAL.Entities.RepositoryCheckEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RepositoryId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("RepositoryId");

                    b.ToTable("RepositoryChecks");
                });

            modelBuilder.Entity("CCMS.DAL.Entities.RepositoryEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("GitHubId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("Repositories");
                });

            modelBuilder.Entity("CCMS.DAL.Entities.ResultCheckEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ConventionCheckEntityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Line")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LineId")
                        .HasColumnType("int");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ConventionCheckEntityId");

                    b.ToTable("ResultCheckEntity");
                });

            modelBuilder.Entity("CCMS.DAL.Entities.UpdatedTextEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("UpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UpdatedById");

                    b.ToTable("ConventionTexts");
                });

            modelBuilder.Entity("CCMS.DAL.Entities.UserEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AvatarUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GitHubId")
                        .HasColumnType("int");

                    b.Property<string>("HtmlUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Login")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("CCMS.DAL.Entities.CommentEntity", b =>
                {
                    b.HasOne("CCMS.DAL.Entities.ConventionEntity", "Convention")
                        .WithMany("Comments")
                        .HasForeignKey("ConventionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CCMS.DAL.Entities.UserEntity", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId");

                    b.Navigation("Convention");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("CCMS.DAL.Entities.ConventionCheckEntity", b =>
                {
                    b.HasOne("CCMS.DAL.Entities.RepositoryCheckEntity", null)
                        .WithMany("ConventionChecks")
                        .HasForeignKey("RepositoryCheckEntityId");
                });

            modelBuilder.Entity("CCMS.DAL.Entities.ConventionEntity", b =>
                {
                    b.HasOne("CCMS.DAL.Entities.UpdatedTextEntity", "FormalText")
                        .WithMany()
                        .HasForeignKey("FormalTextId");

                    b.HasOne("CCMS.DAL.Entities.UpdatedTextEntity", "FormattedText")
                        .WithMany()
                        .HasForeignKey("FormattedTextId");

                    b.HasOne("CCMS.DAL.Entities.RepositoryEntity", "Repository")
                        .WithMany("Conventions")
                        .HasForeignKey("RepositoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CCMS.DAL.Entities.UserEntity", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");

                    b.Navigation("FormalText");

                    b.Navigation("FormattedText");

                    b.Navigation("Repository");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("CCMS.DAL.Entities.PatchEntity", b =>
                {
                    b.HasOne("CCMS.DAL.Entities.UserEntity", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("CCMS.DAL.Entities.UpdatedTextEntity", "UpdatedTextEntity")
                        .WithMany("Patches")
                        .HasForeignKey("UpdatedTextEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("UpdatedTextEntity");
                });

            modelBuilder.Entity("CCMS.DAL.Entities.RepositoryCheckEntity", b =>
                {
                    b.HasOne("CCMS.DAL.Entities.UserEntity", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("CCMS.DAL.Entities.RepositoryEntity", "Repository")
                        .WithMany("Checks")
                        .HasForeignKey("RepositoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("Repository");
                });

            modelBuilder.Entity("CCMS.DAL.Entities.ResultCheckEntity", b =>
                {
                    b.HasOne("CCMS.DAL.Entities.ConventionCheckEntity", null)
                        .WithMany("Results")
                        .HasForeignKey("ConventionCheckEntityId");
                });

            modelBuilder.Entity("CCMS.DAL.Entities.UpdatedTextEntity", b =>
                {
                    b.HasOne("CCMS.DAL.Entities.UserEntity", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("CCMS.DAL.Entities.ConventionCheckEntity", b =>
                {
                    b.Navigation("Results");
                });

            modelBuilder.Entity("CCMS.DAL.Entities.ConventionEntity", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("CCMS.DAL.Entities.RepositoryCheckEntity", b =>
                {
                    b.Navigation("ConventionChecks");
                });

            modelBuilder.Entity("CCMS.DAL.Entities.RepositoryEntity", b =>
                {
                    b.Navigation("Checks");

                    b.Navigation("Conventions");
                });

            modelBuilder.Entity("CCMS.DAL.Entities.UpdatedTextEntity", b =>
                {
                    b.Navigation("Patches");
                });
#pragma warning restore 612, 618
        }
    }
}
