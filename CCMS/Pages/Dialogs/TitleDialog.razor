@inject UserViewModel userViewModel

<RadzenTemplateForm TItem="DialogData" Data="@Data" Submit="@OnSubmit">
    <div class="row">
        <div class="col-md-2 align-items-center d-flex">
            <RadzenLabel Text="Title"/>
        </div>
        <div class="col-md-10">
            <RadzenTextBox style="display: block" Name="Title" @bind-Value="@Data.Text" class="w-100"/>
            <RadzenRequiredValidator Component="Title" Text="Title is required" Popup="true" Style="position: absolute"/>
        </div>
    </div>
    <div class="text-right mt-2">
        <RadzenButton Text="Save" Style="margin-bottom: 10px; width: 150px" Image="images/save.png" ButtonType="ButtonType.Submit"/>
        <RadzenButton Text="Cancel" Click="Close" ButtonStyle="ButtonStyle.Light" Image="images/close.png" Style="margin-bottom: 10px; width: 150px"/>
    </div>
</RadzenTemplateForm>

@code
{
    [Parameter]
    public DialogService DialogService { get; set; }

    [Parameter]
    public string Input { get; set; }

    public bool IsClosed { get; set; }

    protected class DialogData
    {
        public string Text { get; set; } = string.Empty;
    }

    DialogData Data { get; set; } = new();

    protected override void OnInitialized()
    {
        Data.Text = Input;
        base.OnInitialized();
    }

    private void OnSubmit()
    {
        DialogService.Close(Data.Text);
    }

    private void Close()
    {
        if (IsClosed) return;
        IsClosed = true;
        DialogService.Close();
    }
}